# The proguard configuration file for the following section is /home/notfatnotfunny/Documents/infoIsFun/Irritation-Project/irrigation_app/build/app/intermediates/default_proguard_files/global/proguard-android.txt-8.1.0
# This is a configuration file for ProGuard.
# http://proguard.sourceforge.net/index.html#manual/usage.html
#
# Starting with version 2.2 of the Android plugin for Gradle, this file is distributed together with
# the plugin and unpacked at build-time. The files in $ANDROID_HOME are no longer maintained and
# will be ignored by new version of the Android plugin for Gradle.

# Optimization is turned off by default. Dex does not like code run
# through the ProGuard optimize steps (and performs some
# of these optimizations on its own).
# Note that if you want to enable optimization, you cannot just
# include optimization flags in your own project configuration file;
# instead you will need to point to the
# "proguard-android-optimize.txt" file instead of this one from your
# project.properties file.
-dontoptimize

-dontusemixedcaseclassnames
-dontskipnonpubliclibraryclasses
-verbose

# Preserve some attributes that may be required for reflection.
-keepattributes AnnotationDefault,
                EnclosingMethod,
                InnerClasses,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations,
                Signature

-keep public class com.google.vending.licensing.ILicensingService
-keep public class com.android.vending.licensing.ILicensingService
-keep public class com.google.android.vending.licensing.ILicensingService
-dontnote com.android.vending.licensing.ILicensingService
-dontnote com.google.vending.licensing.ILicensingService
-dontnote com.google.android.vending.licensing.ILicensingService

# For native methods, see http://proguard.sourceforge.net/manual/examples.html#native
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}

# Keep setters in Views so that animations can still work.
-keepclassmembers public class * extends android.view.View {
    void set*(***);
    *** get*();
}

# We want to keep methods in Activity that could be used in the XML attribute onClick.
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}

# For enumeration classes, see http://proguard.sourceforge.net/manual/examples.html#enumerations
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keepclassmembers class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

# Preserve annotated Javascript interface methods.
-keepclassmembers class * {
    @android.webkit.JavascriptInterface <methods>;
}

# The support libraries contains references to newer platform versions.
# Don't warn about those in case this app is linking against an older
# platform version. We know about them, and they are safe.
-dontnote android.support.**
-dontnote androidx.**
-dontwarn android.support.**
-dontwarn androidx.**

# This class is deprecated, but remains for backward compatibility.
-dontwarn android.util.FloatMath

# Understand the @Keep support annotation.
-keep class android.support.annotation.Keep
-keep class androidx.annotation.Keep

-keep @android.support.annotation.Keep class * {*;}
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <init>(...);
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

# These classes are duplicated between android.jar and org.apache.http.legacy.jar.
-dontnote org.apache.http.**
-dontnote android.net.http.**

# These classes are duplicated between android.jar and core-lambda-stubs.jar.
-dontnote java.lang.invoke.**

# End of content from /home/notfatnotfunny/Documents/infoIsFun/Irritation-Project/irrigation_app/build/app/intermediates/default_proguard_files/global/proguard-android.txt-8.1.0
# The proguard configuration file for the following section is /usr/lib/flutter/packages/flutter_tools/gradle/flutter_proguard_rules.pro
# Build the ephemeral app in a module project.
# Prevents: Warning: library class <plugin-package> depends on program class io.flutter.plugin.**
# This is due to plugins (libraries) depending on the embedding (the program jar)
-dontwarn io.flutter.plugin.**

# The android.** package is provided by the OS at runtime.
-dontwarn android.**

# End of content from /usr/lib/flutter/packages/flutter_tools/gradle/flutter_proguard_rules.pro
# The proguard configuration file for the following section is /home/notfatnotfunny/Documents/infoIsFun/Irritation-Project/irrigation_app/android/app/proguard-rules.pro
# Keep the classes from the Google API client and HttpTransport
-keep class com.google.api.client.http.GenericUrl.** { *; }
-keep class com.google.api.client.http.HttpHeaders.** { *; }
-keep class com.google.api.client.http.HttpRequest.** { *; }
-keep class com.google.api.client.http.HttpRequestFactory.** { *; }
-keep class com.google.api.client.http.HttpResponse.** { *; }
-keep class com.google.api.client.http.HttpTransport.** { *; }
-keep class com.google.api.client.http.javanet.NetHttpTransport$Builder.** { *; }
-keep class com.google.api.client.http.javanet.NetHttpTransport.** { *; }

# Keep annotations (javax.annotation)
-keep @javax.annotation.Nullable class * { *; }
-keep @javax.annotation.concurrent.GuardedBy class * { *; }
-keep @javax.annotation.concurrent.ThreadSafe class * { *; }

# Keep Joda-Time classes
-keep class org.joda.convert.FromString.** { *; }
-keep class org.joda.convert.ToString.** { *; }

# Suppress warnings about these missing classes
-keep class com.google.api.client.http.GenericUrl.** { *; }
-keep class com.google.api.client.http.HttpHeaders.** { *; }
-keep class com.google.api.client.http.HttpRequest.** { *; }
-keep class com.google.api.client.http.HttpRequestFactory.** { *; }
-keep class com.google.api.client.http.HttpResponse.** { *; }
-keep class com.google.api.client.http.HttpTransport.** { *; }
-keep class com.google.api.client.http.javanet.NetHttpTransport$Builder.** { *; }
-keep class com.google.api.client.http.javanet.NetHttpTransport.** { *; }
-keep class javax.annotation.Nullable.** { *; }
-keep class javax.annotation.concurrent.GuardedBy.** { *; }

-dontwarn javax.annotation.concurrent.ThreadSafe
-dontwarn org.joda.convert.FromString
-dontwarn org.joda.convert.ToString
-dontwarn javax.annotation.Nullable
-dontwarn javax.annotation.concurrent.GuardedBy
# End of content from /home/notfatnotfunny/Documents/infoIsFun/Irritation-Project/irrigation_app/android/app/proguard-rules.pro
# The proguard configuration file for the following section is /home/notfatnotfunny/Documents/infoIsFun/Irritation-Project/irrigation_app/build/app/intermediates/aapt_proguard_file/release/aapt_rules.txt
-keep class android.app.Application { <init>(); }
-keep class androidx.core.app.CoreComponentFactory { <init>(); }
-keep class androidx.profileinstaller.ProfileInstallReceiver { <init>(); }
-keep class androidx.startup.InitializationProvider { <init>(); }
-keep class com.example.irrigation_app.MainActivity { <init>(); }

# End of content from /home/notfatnotfunny/Documents/infoIsFun/Irritation-Project/irrigation_app/build/app/intermediates/aapt_proguard_file/release/aapt_rules.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/40ee42e9a1f6ae7bcbaeb23a237a29f0/transformed/rules/lib/META-INF/proguard/protobuf.pro
# Recently Protobuf Javalite introduced a change that relies on reflection,
# which doesn't work with Proguard. This rule keeps the reflection usages in
# (shaded) Protobuf classes in Tink as-is.
# The location of this file is determined by
# - https://developer.android.com/studio/build/shrink-code#configuration-files
# - https://docs.bazel.build/versions/master/be/java.html#java_library.resources
# See also:
# - https://github.com/google/tink/issues/361
# - https://github.com/protocolbuffers/protobuf/issues/6463
# WARNING: the shaded package name com.google.crypto.tink.shaded.protobuf must
# be kept in sync with jar_jar_rules.txt.
-keepclassmembers class * extends com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite {
  <fields>;
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/40ee42e9a1f6ae7bcbaeb23a237a29f0/transformed/rules/lib/META-INF/proguard/protobuf.pro
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/faa98184e221e9e6b66dd8ae0211e939/transformed/fragment-1.7.1/proguard.txt
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The default FragmentFactory creates Fragment instances using reflection
-if public class ** extends androidx.fragment.app.Fragment
-keepclasseswithmembers,allowobfuscation public class <1> {
    public <init>();
}

# FragmentTransition will reflectively lookup:
# androidx.transition.FragmentTransitionSupport
# We should ensure that we keep the constructor if the code using this is alive
-if class androidx.fragment.app.FragmentTransition {
   private static androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl();
}
-keep class androidx.transition.FragmentTransitionSupport {
    public <init>();
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/faa98184e221e9e6b66dd8ae0211e939/transformed/fragment-1.7.1/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/c3a65cc3b2d38411f412eb2ad413726b/transformed/jetified-window-1.2.0/proguard.txt
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A rule that will keep classes that implement SidecarInterface$SidecarCallback if Sidecar seems
# be used. See b/157286362 and b/165268619 for details.
# TODO(b/208543178) investigate how to pass header jar to R8 so we don't need this rule
-if class androidx.window.layout.adapter.sidecar.SidecarCompat {
  public *** setExtensionCallback(androidx.window.layout.adapter.sidecar.ExtensionInterfaceCompat$ExtensionCallbackInterface);
}
-keep class androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback,
 androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback {
  public *** onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState);
  public *** onWindowLayoutChanged(android.os.IBinder, androidx.window.sidecar.SidecarWindowLayoutInfo);
}
# Required for window area API reflection guard
-keep interface androidx.window.area.reflectionguard.* {*;}
# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/c3a65cc3b2d38411f412eb2ad413726b/transformed/jetified-window-1.2.0/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/d271026179bf09c7fe4bd4ab7adc609e/transformed/lifecycle-viewmodel-2.7.0/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>();
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application);
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/d271026179bf09c7fe4bd4ab7adc609e/transformed/lifecycle-viewmodel-2.7.0/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/f92310ea9da44b32e2ca5692a0c96c1f/transformed/jetified-lifecycle-viewmodel-savedstate-2.7.0/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>(androidx.lifecycle.SavedStateHandle);
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application,androidx.lifecycle.SavedStateHandle);
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/f92310ea9da44b32e2ca5692a0c96c1f/transformed/jetified-lifecycle-viewmodel-savedstate-2.7.0/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/1149812b72a13a7db667e7098fd1cedc/transformed/core-1.13.1/proguard.txt
# Never inline methods, but allow shrinking and obfuscation.
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.ViewCompat$Api* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.WindowInsetsCompat$*Impl* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.app.NotificationCompat$*$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.os.UserHandleCompat$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.widget.EdgeEffectCompat$Api*Impl {
  <methods>;
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/1149812b72a13a7db667e7098fd1cedc/transformed/core-1.13.1/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/81330121615402e57b6d3397430f9c44/transformed/lifecycle-runtime-2.7.0/proguard.txt
-keepattributes AnnotationDefault,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations

-keepclassmembers enum androidx.lifecycle.Lifecycle$Event {
    <fields>;
}

-keep class * implements androidx.lifecycle.GeneratedAdapter {
    <init>(...);
}

-keepclassmembers class ** {
    @androidx.lifecycle.OnLifecycleEvent *;
}

# this rule is need to work properly when app is compiled with api 28, see b/142778206
# Also this rule prevents registerIn from being inlined.
-keepclassmembers class androidx.lifecycle.ReportFragment$LifecycleCallbacks { *; }
# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/81330121615402e57b6d3397430f9c44/transformed/lifecycle-runtime-2.7.0/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/169035cbfa0c571b95f1a2956474ea69/transformed/jetified-lifecycle-process-2.7.0/proguard.txt
# this rule is need to work properly when app is compiled with api 28, see b/142778206
-keepclassmembers class * extends androidx.lifecycle.EmptyActivityLifecycleCallbacks { *; }
# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/169035cbfa0c571b95f1a2956474ea69/transformed/jetified-lifecycle-process-2.7.0/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/9fd140aacb8b2b7474257a773ad748c4/transformed/jetified-savedstate-1.2.1/proguard.txt
# Copyright (C) 2019 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

-keepclassmembers,allowobfuscation class * implements androidx.savedstate.SavedStateRegistry$AutoRecreated {
    <init>();
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/9fd140aacb8b2b7474257a773ad748c4/transformed/jetified-savedstate-1.2.1/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/c815185026ee0aa40544a77b9adc4551/transformed/versionedparcelable-1.1.1/proguard.txt
-keep class * implements androidx.versionedparcelable.VersionedParcelable
-keep public class android.support.**Parcelizer { *; }
-keep public class androidx.**Parcelizer { *; }
-keep public class androidx.versionedparcelable.ParcelImpl

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/c815185026ee0aa40544a77b9adc4551/transformed/versionedparcelable-1.1.1/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/d68f11fd165fa355670f05ae11d3763f/transformed/jetified-startup-runtime-1.1.1/proguard.txt
# It's important that we preserve initializer names, given they are used in the AndroidManifest.xml.
-keepnames class * extends androidx.startup.Initializer

# These Proguard rules ensures that ComponentInitializers are are neither shrunk nor obfuscated,
# and are a part of the primary dex file. This is because they are discovered and instantiated
# during application startup.
-keep class * extends androidx.startup.Initializer {
    # Keep the public no-argument constructor while allowing other methods to be optimized.
    <init>();
}

-assumenosideeffects class androidx.startup.StartupLogger { public static <methods>; }

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/d68f11fd165fa355670f05ae11d3763f/transformed/jetified-startup-runtime-1.1.1/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/6e53666b716bc39f4aedbea4038340f5/transformed/jetified-core-1.0.0/proguard.txt
# Copyright (C) 2022 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# These interfaces must be kept for the client library to invoke methods in extensions.
-keep interface androidx.window.extensions.core.util.function.Consumer {
  public void accept(***);
}
-keep interface androidx.window.extensions.core.util.function.Predicate {
  public boolean test(***);
}
-keep interface androidx.window.extensions.core.util.function.Function {
  public *** apply(***);
}
# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/6e53666b716bc39f4aedbea4038340f5/transformed/jetified-core-1.0.0/proguard.txt
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/9d4376d2a1b952b9a9bad18e4da66271/transformed/rules/lib/META-INF/proguard/androidx-annotations.pro
-keep,allowobfuscation @interface androidx.annotation.Keep
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

-keepclassmembers,allowobfuscation class * {
  @androidx.annotation.DoNotInline <methods>;
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/9d4376d2a1b952b9a9bad18e4da66271/transformed/rules/lib/META-INF/proguard/androidx-annotations.pro
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/e76654d861bb775fdcb95ab33be8494c/transformed/rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# Allow R8 to optimize away the FastServiceLoader.
# Together with ServiceLoader optimization in R8
# this results in direct instantiation when loading Dispatchers.Main
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatcherLoader {
    boolean FAST_SERVICE_LOADER_ENABLED return false;
}

-assumenosideeffects class kotlinx.coroutines.internal.FastServiceLoaderKt {
    boolean ANDROID_DETECTED return true;
}

# Disable support for "Missing Main Dispatcher", since we always have Android main dispatcher
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatchersKt {
    boolean SUPPORT_MISSING return false;
}

# Statically turn off all debugging facilities and assertions
-assumenosideeffects class kotlinx.coroutines.DebugKt {
    boolean getASSERTIONS_ENABLED() return false;
    boolean getDEBUG() return false;
    boolean getRECOVER_STACK_TRACES() return false;
}

# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/e76654d861bb775fdcb95ab33be8494c/transformed/rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# The proguard configuration file for the following section is /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/52e551e819435766706d56ea5ea9c314/transformed/rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# When editing this file, update the following files as well:
# - META-INF/proguard/coroutines.pro
# - META-INF/com.android.tools/proguard/coroutines.pro

# Most of volatile fields are updated with AFU and should not be mangled
-keepclassmembers class kotlinx.coroutines.** {
    volatile <fields>;
}

# Same story for the standard library's SafeContinuation that also uses AtomicReferenceFieldUpdater
-keepclassmembers class kotlin.coroutines.SafeContinuation {
    volatile <fields>;
}

# These classes are only required by kotlinx.coroutines.debug.AgentPremain, which is only loaded when
# kotlinx-coroutines-core is used as a Java agent, so these are not needed in contexts where ProGuard is used.
-dontwarn java.lang.instrument.ClassFileTransformer
-dontwarn sun.misc.SignalHandler
-dontwarn java.lang.instrument.Instrumentation
-dontwarn sun.misc.Signal

# Only used in `kotlinx.coroutines.internal.ExceptionsConstructor`.
# The case when it is not available is hidden in a `try`-`catch`, as well as a check for Android.
-dontwarn java.lang.ClassValue

# An annotation used for build tooling, won't be directly accessed.
-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
# End of content from /home/notfatnotfunny/.gradle/caches/8.10.2/transforms/52e551e819435766706d56ea5ea9c314/transformed/rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# The proguard configuration file for the following section is <unknown>

# End of content from <unknown>